<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LuckyBamboo的蔡园</title>
  <subtitle>记录 分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://leaosunday.cc/"/>
  <updated>2016-12-16T12:54:27.193Z</updated>
  <id>http://leaosunday.cc/</id>
  
  <author>
    <name>LuckyBamboo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hash-py</title>
    <link href="http://leaosunday.cc/2016/12/16/hash-py/"/>
    <id>http://leaosunday.cc/2016/12/16/hash-py/</id>
    <published>2016-12-16T12:45:03.000Z</published>
    <updated>2016-12-16T12:54:27.193Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>不时会爆出网站的服务器和数据库被盗取，考虑到这点，就要确保用户一些敏感数据（例如密码）的安全性。今天，我们要学的是 hash 背后的基础知识，以及如何用它来保护你的 web 应用的密码。</p>
</blockquote>
<p><strong>友情链接：</strong></p>
<ul>
<li><a href="http://www.cnblogs.com/hazir/p/hash_function_and_its_importance.html" target="_blank" rel="external">Hash 函数及其重要性</a></li>
</ul>
<a id="more"></a>
<h1 id="Hash-函数及其重要性"><a href="#Hash-函数及其重要性" class="headerlink" title="Hash 函数及其重要性"></a><a href="http://www.cnblogs.com/hazir/p/hash_function_and_its_importance.html" target="_blank" rel="external">Hash 函数及其重要性</a></h1><p>作者：hazir<br>链接：<a href="http://www.cnblogs.com/hazir/p/hash_function_and_its_importance.html" target="_blank" rel="external">http://www.cnblogs.com/hazir/p/hash_function_and_its_importance.html</a><br>来源：博客园</p>
<p>不时会爆出网站的服务器和数据库被盗取，考虑到这点，就要确保用户一些敏感数据（例如密码）的安全性。今天，我们要学的是 hash 背后的基础知识，以及如何用它来保护你的 web 应用的密码。</p>
<h2 id="申明"><a href="#申明" class="headerlink" title="申明"></a>申明</h2><p>密码学是非常复杂的一门学科，我不是这方面的专家，在很多大学和安全机构，在这个领域都有长期的研究。</p>
<p>本文我试图使事情简单化，呈现给大家的是一个 web 应用中安全存储密码的合理方法。</p>
<h2 id="“Hashing”-做的是什么？"><a href="#“Hashing”-做的是什么？" class="headerlink" title="“Hashing” 做的是什么？"></a>“Hashing” 做的是什么？</h2><p>Hashing 将一段数据（无论长还是短）转成相对较短的一段数据，例如一个字符串或者一个整数。</p>
<p>这是通过使用单向哈希函数来完成的。“单向” 意味着逆转它是困难的，或者实际上是不可能的。</p>
<p>加密可以保证信息的安全性，避免被拦截到被破解。Python 的加密支持包括使用 hashlib 的标准算法（例如 MD5 和 SHA），根据信息的内容生成签名，HMAC 用来验证信息在传送过程中没有被篡改。</p>
<p>一个通常使用的 hash 函数的例子是 <a href="http://docs.python.org/3.3/library/hashlib.html#module-hashlib" target="_blank" rel="external"><strong>md5()</strong></a>，这也是当前在很多不同语言和系统中比较流行的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import hashlib</div><div class="line"></div><div class="line">data = &quot;Hello World&quot;</div><div class="line"></div><div class="line">h = hashlib.md5()</div><div class="line">h.update(data)</div><div class="line">print(h.hexdigest())</div><div class="line"># b10a8db164e0754105b7a99be72e3fe5</div></pre></td></tr></table></figure>
<p>为了计算一个数据块（这儿是 ASCII 字符串）的 <code>MD5</code> 哈希值或摘要，首先需要创建一个 hash 对象，然后添加数据，再调用 <code>digest()</code> 或者 <code>hexdigest()</code> 函数。本例使用的是 <code>hexdigest()</code> 方法来代替 <code>digest()</code> ，是因为为了更清晰地输出而对结果进行了格式化。如果你能接受输出二进制的摘要值，那么就用 <code>digest()</code>。</p>
<h2 id="使用-Hash-函数来存储密码"><a href="#使用-Hash-函数来存储密码" class="headerlink" title="使用 Hash 函数来存储密码"></a>使用 Hash 函数来存储密码</h2><p><strong>用户注册的过程通常是这样的：</strong></p>
<ul>
<li>用户填写注册表单，包括密码这一项</li>
<li>web 脚本将所有的信息存储在数据库中</li>
<li>然而，密码在存储之前需要通过 hash 函数进行转化</li>
<li>最原始版本的密码并没有保存在任何地方，因此从技术上讲它消失了</li>
</ul>
<p><strong>用户登录的过程：</strong></p>
<ul>
<li>用户输入用户名和密码</li>
<li>脚本用同样的 hash 函数来转化密码</li>
<li>脚本找到记录在数据库中的用户信息，读取保存 hash 之后的密码</li>
<li>比较两者的值，如果匹配了就完成了登录</li>
</ul>
<p>注意原始密码不会存储在任何地方！那么如果数据库被盗，那么用户的登录信息不会被盗，是吗？答案是“根据情况来定”。让我们看看一些潜在的问题：</p>
<h2 id="问题1：Hash-冲突"><a href="#问题1：Hash-冲突" class="headerlink" title="问题1：Hash 冲突"></a>问题1：Hash 冲突</h2><p>当两个不同的输入数据产生相同的 Hash 结果时，这就发生了 Hash 冲突。发生的概率依赖于你所使用的函数。</p>
<h3 id="如果利用呢？"><a href="#如果利用呢？" class="headerlink" title="如果利用呢？"></a>如果利用呢？</h3><p>作为例子，我使用一些老的脚本，它们使用 <a href="http://docs.python.org/3.3/library/binascii.html#binascii.crc32" target="_blank" rel="external"><strong>crc32()</strong></a> 来 Hash 密码。这个函数会产生 32 位整数的结果，这意味着仅仅有<code>2^32 (i.e. 4,294,967,296)</code> 种结果。</p>
<p>让我们来 hash 一个密码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import binascii</div><div class="line">result = binascii.crc32(&apos;supersecretpassword&apos;)</div><div class="line">print(result) #323322056</div></pre></td></tr></table></figure>
<p>现在，我们假设有人盗取了数据库，有了 hash 值。我们也许并不能将 <code>323322056</code> 转成 <code>supersecretpassword</code>，然而我们能用一个简单的脚本，来找到另一个密码可以转化为相同的 hash 值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import binascii,base64</div><div class="line"></div><div class="line">i = 0</div><div class="line">while True:</div><div class="line">    if binascii.crc32(base64.encodestring(bytes(i,))) == 323322056:</div><div class="line">        print(base64.encodestring(i))</div><div class="line">        i += 1</div></pre></td></tr></table></figure>
<p>这可能需要运行好一会，但最终会返回一个字符串。我们可以用返回的字符串来代替 <code>supersecretpassword</code>，也同样能登录进入那个用户的账户。</p>
<p>举例来说，在我电脑运行那个脚本一会之后，得到字符串 <code>MTIxMjY5MTAwNg==</code>，让我们测试一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import binascii</div><div class="line"></div><div class="line">print(binascii.crc32(&quot;supersecretpassword&quot;))</div><div class="line">#323322056</div><div class="line"></div><div class="line">print(binascii.crc32(&quot;MTIxMjY5MTAwNg==&quot;))</div><div class="line">#323322056</div></pre></td></tr></table></figure>
<h3 id="如何避免呢？"><a href="#如何避免呢？" class="headerlink" title="如何避免呢？"></a>如何避免呢？</h3><p>现在，一个强大的家庭 PC 机就可以用来每秒钟运行一个哈希函数十亿次之多，那么我们需要一个产生非常大范围数的哈希函数。</p>
<p>举例来说，<code>md5()</code> 可能就比较适合，因为它产生 128 位哈希值，也就是 340,282,366,920,938,463,463,374,607,431,768,211,456 可能的结果。通过遍历找到冲突不可能的，然而有些人仍然这样做（参考<a href="http://www.mscs.dal.ca/~selinger/md5collision/" target="_blank" rel="external"><strong>这里</strong></a>)。</p>
<h3 id="Sha1"><a href="#Sha1" class="headerlink" title="Sha1"></a>Sha1</h3><p><strong>Sha1()</strong> 是一个更好的替代方案，它会产生甚至长达 160 位的 hash 值。</p>
<h2 id="问题2：彩虹表"><a href="#问题2：彩虹表" class="headerlink" title="问题2：彩虹表"></a>问题2：彩虹表</h2><p>甚至我们解决了冲突的问题，我们还不能确保安全。</p>
<p>彩虹表（rainbow table）是通过计算一些常用的单词和它们的组合的 hash 值而创建的。这些表有多达上百万或上亿项。</p>
<p>举例来说，你可以遍历一个字典，为每个单词产生一个 hash 值。你也可以将它们进行组合，也为组合的单词产生 hash 值。这还没完，你甚至可以以数字插入单词的开始、结尾、中间，将它们也存入表中。</p>
<p>考虑到现在存储系统非常廉价，可以产生和使用上 G 量级的彩虹表。</p>
<h3 id="如何利用呢？"><a href="#如何利用呢？" class="headerlink" title="如何利用呢？"></a>如何利用呢？</h3><p>让我们想象一下，一个大的数据库被盗，里面有一千万的密码哈希值。在彩虹表中搜索与数据库中密码哈希值的匹配是件相当简单的事，不是所有密码都能找到，但也不是都找不到！它们中的一些肯定可以找到！</p>
<h3 id="如何避免呢？-1"><a href="#如何避免呢？-1" class="headerlink" title="如何避免呢？"></a>如何避免呢？</h3><p>我们尝试添加盐化(salt)字符串来解决，下面是个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import hashlib</div><div class="line"></div><div class="line">password = &quot;EasyPassword&quot;</div><div class="line"></div><div class="line">print(hashlib.sha1(password).hexdigest())</div><div class="line"># ff166c2477f864d609ca8111680bfa387eb4e509</div><div class="line"></div><div class="line">salt = &quot;f#@V)Hu^%Hgfds&quot;</div><div class="line"></div><div class="line">print(hashlib.sha1(salt + password).hexdigest())</div><div class="line"># 3e7edaceb96becaf69ae7e73073812ea136188e2</div></pre></td></tr></table></figure>
<p>我们做的很简单，在 hash 密码之前将“盐化”字符串与用户密码连接，这样很显然 hash 的结果和之前建立的彩虹表没有一个匹配。但是，我们还不够安全！</p>
<h2 id="问题3：彩虹表问题（续）"><a href="#问题3：彩虹表问题（续）" class="headerlink" title="问题3：彩虹表问题（续）"></a>问题3：彩虹表问题（续）</h2><p>记住，在数据库被盗之后，还可以重建彩虹表。</p>
<h3 id="如何利用呢？-1"><a href="#如何利用呢？-1" class="headerlink" title="如何利用呢？"></a>如何利用呢？</h3><p>即使使用了“盐化”字符串，仍然有可能随着数据库被盗而破解。他们所要做的是重新产生新的彩虹表，但这次他们会连接“盐化”字符串到每个密码上。</p>
<p>举例来说，通常彩虹表中 <code>easypassword</code> 可能存在，但在新的彩虹表中，也存在 <code>f#@V)Hu^%Hgfdseasypassword</code> 这样的密码。当他们将上千万条盗来的经过盐化的哈希值与这张新彩虹表比较时，他们也会能找到一些相同的匹配。</p>
<h3 id="如何避免呢？-2"><a href="#如何避免呢？-2" class="headerlink" title="如何避免呢？"></a>如何避免呢？</h3><p>我们使用唯一的 “salt” 替代，每个用户都不一样。</p>
<p>一种备选 salt 是从数据库中取得用户的 ID：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hashlib.sha1(userid + password).hexdigest()</div></pre></td></tr></table></figure>
<p>基于的假设是用户的 ID 号永远不会改变，一般这都是成立的。</p>
<p>我们也可以为每个用户产生一个随机字符串，把它作为这个唯一的“盐化”字符串。但是我们需要保证要将这个唯一的“盐化”字符串保存在用户记录的某个位置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import hashlib, os</div><div class="line"></div><div class="line">def unique_salt():</div><div class="line">    return hashlib.sha1(os.urandom(10)).hexdigest()[:22]</div><div class="line"></div><div class="line">salt = unique_salt()</div><div class="line">password = &quot;&quot; # str or int</div><div class="line">hash = hashlib.sha1(salt + str(password)).hexdigest()</div><div class="line">print(hash)</div><div class="line"># 37dec03d2761122819f8708e6d5c8392ee02b40d</div></pre></td></tr></table></figure>
<p>这种方法有效预防了使用彩虹表破解，因为现在每一个密码都经过不同的值盐化过，攻击者需要生成一千万个独立的彩虹表，这实际上是不现实的。</p>
<h2 id="问题4：Hash-速度"><a href="#问题4：Hash-速度" class="headerlink" title="问题4：Hash 速度"></a>问题4：Hash 速度</h2><p>大多 Hash 函数在设计时都注重速度，因为它们常用于计算大数据集和文件的 checksum 值，来检查数据的完整性。</p>
<h3 id="如何利用呢？-2"><a href="#如何利用呢？-2" class="headerlink" title="如何利用呢？"></a>如何利用呢？</h3><p>就像我之前提到的，一个现代 PC 机带有强大的 GPU（或者显卡）可以完成每秒钟上千次的 hash 运算。这种方法，他们可以使用暴力攻击法，尝试每个可能的密码。</p>
<p>你可能认为需要不少于 8 位长度的密码可能避免暴力破解，让我们看下面的分析来决定是否真的能避免：</p>
<ul>
<li>如果密码包含小写字母、大写字母以及数字，也就是有 <code>62 (26+26+10)</code> 种可能的字符。</li>
<li>一个 8 位长的字符串就有 <code>62^8</code> 可能的组合，比 218 万亿略小一点。</li>
<li>以每秒十亿的 hash 速率，大约在 60 个小时内就可以破解。</li>
</ul>
<p>如果是 6 位长的密码，这也相当普遍，只需要在 1 分钟之内就可以破解。</p>
<p>如果要求 9 位或 10 位长度的密码，这样就会让你的用户体验非常不好。</p>
<h3 id="如何避免呢？-3"><a href="#如何避免呢？-3" class="headerlink" title="如何避免呢？"></a>如何避免呢？</h3><p>使用一个低速的 hash 函数。</p>
<p>假设你是用一个 hash 函数，在同样的硬件下，每秒钟只能进行 100 万次 hash 运算，而不是 10 亿次，暴力破解将会花费比以前多出 1000 倍的时间。那么 60 个小时将会变成将近 7 年！</p>
<p>一种你可以实现的方法是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import hashlib</div><div class="line"></div><div class="line">def my_hash(password, salt):</div><div class="line">    hash = hashlib.sha1(salt + password).hexdigest()</div><div class="line"></div><div class="line">    for i in range(1000):</div><div class="line">        hash = hashlib.sha1(hash).hexdigest()</div><div class="line">    return hash</div><div class="line"></div><div class="line">print(my_hash(&quot;12345&quot;, &quot;f#@V)Hu^%Hgfds&quot;))</div></pre></td></tr></table></figure>
<p>或者，你可以使用支持 “开销参数”（例如 <strong>BLOWFISH</strong>）的算法。在 Python 中，可以利用 <strong>py-crypt</strong> 库。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import bcrypt</div><div class="line"></div><div class="line">def my_hash(password):</div><div class="line">    return bcrypt.hashpw(password, bcrypt.gensalt(10))</div><div class="line"></div><div class="line">print(my_hash(&quot;atdk&quot;))</div><div class="line">#$2a$10$WNhGOdVhoZrrKgwxGa2VIuzfAvm9oFWZF9PIVtLIoU5LQOVGLuLrq</div></pre></td></tr></table></figure>
<p><strong>注意输出：</strong></p>
<ol>
<li>第一个值是 <code>$2a</code>，表明我们使用的是 BLOWFISH 算法。</li>
<li>这种情形下第二个值是 <code>$10</code>，是“开销参数”。是执行迭代的次数以 2 为对数的结果，它将会迭代<code>(10 =&gt; 2^10 = 1024)</code> 次。这个数值可以在 4 到 31 范围内变化。</li>
</ol>
<p>让我们运行例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import bcrypt, os, hashlib</div><div class="line"></div><div class="line">def my_hash(password, unique_salt):</div><div class="line">    return bcrypt.hashpw(password, bcrypt.gensalt(10) + unique_salt)</div><div class="line"></div><div class="line">def unique_salt():</div><div class="line">    return hashlib.sha1(os.urandom(10)).hexdigest()[:22]</div><div class="line"></div><div class="line">password = &quot;verysecret&quot;</div><div class="line"></div><div class="line">print(my_hash(password, unique_salt()))</div><div class="line"># $2a$10$aHx0q.FE/tGvGWzlm6yePemYx9SAsBP2iSiy/uFx7pyjpy980Hita</div></pre></td></tr></table></figure>
<p>结果包括算法（$2a），开销参数（$10），使用的 22 位 salt，剩下的是计算的 hash 值。让我们测试一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import bcrypt, os, hashlib</div><div class="line"></div><div class="line"># assume this was pulled from the database</div><div class="line">hash = &quot;$2a$10$6XDaX/3kNby0jI9Ih/Re7.478DOMZK9OnA2mTxKUP0My.39N.jdky&quot;</div><div class="line"></div><div class="line"># assume this is the password the user entered to log back in</div><div class="line">password = &quot;verysecret&quot;</div><div class="line"></div><div class="line">def check_password(hash, password):</div><div class="line">    salt = hash[:29]</div><div class="line">    new_hash = bcrypt.hashpw(password, salt)</div><div class="line">    return hash == new_hash</div><div class="line"></div><div class="line">if check_password(hash, password):</div><div class="line">    print(&quot;Access Granted&quot;)</div><div class="line">else:</div><div class="line">    print(&quot;Access Denied&quot;)</div></pre></td></tr></table></figure>
<p>当我们运行时，我们看到输出 “Access Granted!”。</p>
<h2 id="整合所有的问题"><a href="#整合所有的问题" class="headerlink" title="整合所有的问题"></a>整合所有的问题</h2><p>如果考虑到上面的所有问题，根据我们目前所学的，写一个实用类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">import bcrypt, os, hashlib</div><div class="line"></div><div class="line">class PassHash():</div><div class="line">    def unique_salt(self):</div><div class="line">        return hashlib.sha1(os.urandom(10)).hexdigest()[:22]</div><div class="line"></div><div class="line">    def hash(self, password):</div><div class="line">        return bcrypt.hashpw(password, bcrypt.gensalt(10) + self.unique_salt())</div><div class="line"></div><div class="line">    def check_password(self, hash, password):</div><div class="line">        full_salt = hash[:29]</div><div class="line">        new_hash = bcrypt.hashpw(password, full_salt)</div><div class="line">        return hash == new_hash</div><div class="line"></div><div class="line">obj = PassHash()</div><div class="line"></div><div class="line">a = obj.hash(&quot;12345&quot;)</div><div class="line">print(a) # $2a$10$gBSbmXKanQJOTSabtX4wfOE2RT2mKDFbCY6r7cqCJSk2YPGjIDrou</div><div class="line"></div><div class="line">b = obj.check_password(a, &quot;12345&quot;)</div><div class="line">print(b) # True</div></pre></td></tr></table></figure>
<p>现在，我们可以在我们的表单中使用该类来 hash 我们密码，确保安全性。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>这种 hash 密码的方法对大多 web 应用已经足够了。别忘记你还可以要求你的用户使用更强的密码，通过强制最小密码长度，组合字符、数字和特殊字符等方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不时会爆出网站的服务器和数据库被盗取，考虑到这点，就要确保用户一些敏感数据（例如密码）的安全性。今天，我们要学的是 hash 背后的基础知识，以及如何用它来保护你的 web 应用的密码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;友情链接：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/hazir/p/hash_function_and_its_importance.html&quot;&gt;Hash 函数及其重要性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://leaosunday.cc/categories/Python/"/>
    
      <category term="技术" scheme="http://leaosunday.cc/categories/Python/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://leaosunday.cc/tags/python/"/>
    
      <category term="hash" scheme="http://leaosunday.cc/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>有了IP地址，为什么还要用MAC地址？</title>
    <link href="http://leaosunday.cc/2016/12/16/ip-mac/"/>
    <id>http://leaosunday.cc/2016/12/16/ip-mac/</id>
    <published>2016-12-16T03:26:46.000Z</published>
    <updated>2016-12-16T12:49:16.209Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近计算机网络学习的过程中有一个问题搞得不太清楚，就是有了IP地址明明已经可以定位一台主机了为什么还要MAC地址，还特意弄一个ARP协议，感觉有点多此一举。特意上网查了一下，发现了知乎上就有很不错的答案，特意记录一下。</p>
</blockquote>
<p><strong>友情链接：</strong></p>
<ul>
<li><a href="https://www.zhihu.com/question/21546408" target="_blank" rel="external">有了 IP 地址，为什么还要用 MAC 地址？</a></li>
</ul>
<a id="more"></a>
<h2 id="知乎原问题"><a href="#知乎原问题" class="headerlink" title="知乎原问题"></a>知乎原问题</h2><p><strong>有了 IP 地址，为什么还要用 MAC 地址？</strong></p>
<p>估计很多人都有这个疑问，但没见哪本书上解释清楚，都只是描述IP是什么，MAC是什么。当数据包到达局域网后，完全可以直接送到对应的IP地址主机，为什么还要询问一下对应IP主机的MAC地址？<br>一个邮递员拿着地址详细到教室的一封信，收件人是小明，教室里没有重名的，邮递员问“小明的学号是多少？”，小明站起来回答“150807”，然后小明坐下，然后邮递员说“学号150807的过来拿信”，小明站起拿信。哎，好像重复了点什么。</p>
<h2 id="个人认为较为靠谱的回答"><a href="#个人认为较为靠谱的回答" class="headerlink" title="个人认为较为靠谱的回答"></a>个人认为较为靠谱的回答</h2><p>作者：向往美<br>链接：<a href="https://www.zhihu.com/question/21546408/answer/53576595" target="_blank" rel="external">https://www.zhihu.com/question/21546408/answer/53576595</a><br>来源：知乎</p>
<p>我来说说我的理解吧。<br>举例说明： 我们知道，出于历史的原因，这个世界上出现了很多的国家和民族，他们都使用不同的语言<br>比如，我要和法国人通信，就要学会法语，和日本人通信，就要学会日语，同理，要学会德语、意大利语、西班牙语。。。<br>如果每和一个国家通信，就要学会对方的语言，那可要累死了。<br>所以，最好的办法，就是大家都用1种语言通信。这样只要学会一门外语就可以跟所有的国家通信了。<br>这种“世界通用语言”可以通过2种途径得到：现成的，和新发明的<br>工业革命以后，日不落帝国是世界的中心，其直接继承者美国也是世界的中心，它们都使用英语，于是英语借助其强势地位，成为世界的通用的语言。<br>同时，“世界语”也是一种世界通用语言，与英语不同，世界语是“新发明”的语言（当然也借鉴了其它语言的规则），也就是说，没有哪个民族是”世界语民族“，也不可能发现某个1000前的石碑，上刻世界语。。。<br>因为没有一个国家的母语是世界语，所以在用世界语交流的时候必须要经过一个“翻译”的过程：把本国语言，翻译成世界语。<br>所以我们可以说，世界语是一种“不完备”的语言，它必须依赖于其它的语言才能使用，或者说：运行于其它语言之上。<br>出于历史的原因，“电脑网络”是从无到有、从小到大发展起来的。<br>有很多的网络被发明出来，这些网络各自使用自己的协议（语言），互不兼容（不同的语言相互不能理解），<br>有些网络只应用于小面积，比如一个家庭，一栋楼房，线路长度按米、百米计算。这类网络叫做“局域网”<br>有些网络应用于很大的面积，比如我办理了宽带，这样我和电信公司之间就有一条长达N公里线路，或者电信公司和电信公司之间有长达几十公里的线路。这类网络叫做“广域网”。<br>因特网就是“网络世界语”，各种网络都用1种协议：因特网协议（TCP/IP协议族）交流，所以各种网络都要有个“翻译”的过程：把本网协议，翻译成因特网协议。<br>正如上文所言，世界语是“不完备”的语言，因为大家使用世界语需要一个翻译的过程<br>所以，因特网协议也是不完备的协议，其它网络在运行TCP/IP协议族的时候，也需要一个翻译的过程<br>这就是MAC地址之所以存在的核心要点，下面详述。</p>
<p>在因特网出现之前就已经有很多的网络出现了，而且因特网并不是第一个全球大网（很明显，历史悠久的有线电话网络就是全球大网）<br>然后，因特网出现了。<br>需要注意的是，因特网在诞生之初，并没有想到自己会成为一个全球性的大网，所以没有针对全球网络的特点进行设计，这就留下了一些短板（比如IP地址不够，协议有漏洞，想想大名鼎鼎的ARP协议漏洞 ）。因特网成功以后，这些漏洞被IPV6弥补</p>
<p>设计因特网的初衷，是为了应付对苏联的核战争（当时还存在苏联）。<br>你可能听说过“恐怖平衡”这个概念，说的是美苏任何一方如果先发制人的向对方发动核战争，对方的核报复也会让自己身处火海，所以谁也不敢首先使用核武器，从而避免了核大战。<br>但很明显，大家追求的是“优势”而不是“平衡”，这种“平衡”也是不得已而为之，如果我方技术高超，有能力取得核战争的胜利，那就可以把这种可笑的“平衡”扔进太平洋。<br>美国国防部在思考：<br>我往苏联扔一颗核弹，苏联的军事指挥通信系统就垮掉了，没有了指挥，再强大的军队也成了无头苍蝇，没有了战斗力。<br>可苏联往美国扔核弹，美国也会有同样的结局。<br>可是。。。如果我设计一种通信网络结构，这种结构”容灾性“很强、很”健壮“、很”高可用“ ，苏联的1颗核弹灭不了，2颗核弹灭不了，3颗核弹才可以灭。而我1颗核弹就可以灭了它。这样我就有了喘息的余地，我就可能成为核战争的胜利者。<br>因特网就是在这种思考之下诞生了。<br>因特网能抵抗核爆炸？真有这么神奇么？看看图就知道了。<br>先说说传统的电话网拓扑：</p>
<p><img src="https://pic3.zhimg.com/7e6a71596fd61bf84b8840605ad7c726_r.jpg" alt=""></p>
<p>电话网是一个典型的星形网络，用户A要给用户F打电话，其路径就是A-K-F<br>同理，用户C要给用户G打电话，路径就是C-K-G<br>也就是说，任何用户之间要打电话，都必不可免的要经过中央交换机K<br>所以你知道为何在打仗的时候，电信局是首要被攻击目标了，因为电信局里面放着电话交换机。如果要破坏这个城市的电话网络，我不用挨家挨户砸电话，只要破坏掉电信局的电话交换机，就万事OK了！<br>那么该怎样防止这种情况的发生呢？<br>方案A，我隐藏交换机的位置所在，让敌方找不到交换机在哪<br>但现代战场，天上有卫星，地下有监听，在严密的监视网络面前，想要将自己隐匿起来，已经不容易了。<br>那就方案B，我在交换机周围布置重兵，建设防御工事，就算你发现了也攻不进来。<br>但现代化的武器威力巨大，再加上核武器，再多的人、再坚固的工事也难以抵挡。<br>所以，思想家们另辟蹊径，在网络的拓扑结构上做文章，改“集中式”为”分布式“，于是因特网出现了。<br>因特网是怎么避免核心设备被攻击，让网络能够在战争中存活更长的时间呢？<br>见下图：</p>
<p><img src="https://pic1.zhimg.com/8411ea2a0904fb0b35456e1d1b577714_r.jpg" alt=""></p>
<p>可以看到，网络拓扑由星形网络，变成了网状网络。<br>这里的每个用户（或称节点）都是一个电话交换机（对于因特网，就是路由器）<br>此时，如果A和H打电话，那路径可多了：<br>最短距离，当然是A-H，所以优先走A-H。<br>但如果A-H断掉了，还可以走A-D-H、A-E-H、A-E-F-B-D-H。。。。<br>所以，A-H断了没事、B-C断了没事，C-D断了没事、F-G断了没事。。。<br>由此可见，网状网络的是一种非常“高可用”的网络，容灾性很好。<br>这些节点的地位（功能）都是相同的，不存在某个节点比另外的节点更重要的情况。所以一个节点出了问题，另外的节点就可以取而代之。<br>而星形网络就不是这样，很明显中央节点比其它节点更重要，中央节点失效，其它节点无法替代，整网就失效了。<br>随着节点数的增加，节点之间的可用线路的数量呈指数方式增加，函数是<code>N*(N-1)/2。</code><br>这个简单的函数可是有很大的威力的，请看下图：<br><img src="https://pic1.zhimg.com/v2-f45e545c7aeaa45c28f0a1179e63ea40_b.png" alt=""></p>
<p>相比于上图电话的星型网络，如果要破坏这样的一张网状网络，又该如何下手呢？<br>因特网最初是国防通信网络（APRA-阿帕网），后演变成连接各大学、政府部门和科研机构的教学科研网，最后演变为烧钱的商业化网络。<br>以上所说的知识面叫做“因特网的体系结构”。</p>
<p>再说说因特网协议：TCP/IP协议族<br>从一开始，因特网就没有想过成为世界性大网，所以，因特网的协议，从制定之初就是”不完备“的<br>也就是说，因特网必须要基于其它网络之上，依靠其它的网络才能完成自身的功能。<br>就像是世界语是不完备的，必须要基于其它语言之上，才能实现其自身的功能。<br>如果世界语运行于汉语之上，那就是：<br>世界语 over 汉语<br>比如，已经存在一种局域网技术，叫做”以太网“，那么好，因特网就运行于以太网之上，英文写作：<br>TCP/IP over Ethernet<br>注：TCP/IP是专为因特网开发的一系列协议当中的2个协议，因这2个协议最重要（同时也最出名），就用这2个协议代言因特网了。<br>还有一种城域网技术叫做“令牌环网 ”，那么好，因特网就运行在令牌环网之上 ，英文写作：<br>TCP/IP over Token-ring<br>还有一种广域网技术叫做”ATM”，那么好，因特网就运行于ATM之上，英文写作：<br>TCP/IP over ATM<br>如果你想要因特网运行于USB呢？自然就是：<br>TCP/IP over USB<br>。。。。。。。。。。。</p>
<p>你肯定知道OSI的7层协议，因特网协议族（TCP/IP协议族）并没有覆盖完整的7层协议 （只定义了第3层和第4层），很明显，因特网没有定义水晶头的形状、网线里有几根铜线、铜线里面传输的电压是多少等等参数，这些参数是诸如以太网这样的网络定义的。<br>那么，为什么因特网不定义这些参数呢？<br>上面说了：“也许”从一开始，因特网就没有想到自己会成为一个世界大网，所以就没有定义得这么复杂。<br>但也有另一种可能：其实一种网络技术，不一定要“大而全”，从1层到7层全制定，可以只制定其中几层。<br>比如以太网定义了1~2层（物理层、数据链路层），因特网定义了3~4层（网络层、传输层），其它公司定义了5~7层（SQL、JPEG、HTTP）<br>这样，不同的网络、不同的协议之间相互配合就可以了。<br>就像是，我是一家生产火车的厂家，我当然可以生产铁轨，制定铁轨的宽度，生产火车车厢。<br>但既然已经有大量的铁轨铺设完毕了，那我就不用管铁轨的事情了。<br>火车运行于现成的铁轨之上就可以了<br>在这里，铁轨就是以太网（局域网）、ATM（广域网）或者其它现存的2层网，火车就是因特网。<br>所以，从来不存在“纯粹的因特网”，因为因特网没有定义底层，只存在TCP/IP over XXX</p>
<p>经过以上的解释，你就知道为何一定需要MAC地址了：<br>既然大家都是“网”，那么，每种网都要给网上的节点（电脑）分配“地址”。<br>以太网的MAC地址格式是12个16进制数，比如0800200A8C6D<br>因特网IP地址格式是4个点分10进制数，比如192.168.201.160<br>刚才说了，不存在“纯粹的因特网”，所以因特网必须要基于以太网之上才能工作，所以就是“同时运行了2个网”<br>就像是世界语必须要基于中文之上才能工作，所以就是“同时说了2种语言”<br>所以，就必须要“翻译”<br>也就是把以太网的MAC地址，翻译成因特网的IP地址，这就是ARP的作用<br>假如我的中文名字叫做“刘涛”，如果要翻译成世界语，就肯定要有个世界语的名字（假设叫LIUTAO）</p>
<p>同样是名字：<br>刘涛→翻译成→LIUTAO<br>同样是地址：<br>21-35-6D-1F-83-9E→翻译成→10.42.90.8</p>
<p>当然了，如果因特网从开始制定之初，就定义了从物理层到传输层的协议，那么因特网就不再依赖于其它任何的网络，这时就不用什么MAC地址了。<br>讲完了。<br>我是不是太罗嗦了。。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近计算机网络学习的过程中有一个问题搞得不太清楚，就是有了IP地址明明已经可以定位一台主机了为什么还要MAC地址，还特意弄一个ARP协议，感觉有点多此一举。特意上网查了一下，发现了知乎上就有很不错的答案，特意记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;友情链接：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/21546408&quot;&gt;有了 IP 地址，为什么还要用 MAC 地址？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://leaosunday.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="IP" scheme="http://leaosunday.cc/tags/IP/"/>
    
      <category term="MAC" scheme="http://leaosunday.cc/tags/MAC/"/>
    
      <category term="计算机网络" scheme="http://leaosunday.cc/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>SOCKET常见的三种类型</title>
    <link href="http://leaosunday.cc/2016/12/16/socket-type/"/>
    <id>http://leaosunday.cc/2016/12/16/socket-type/</id>
    <published>2016-12-16T03:26:35.000Z</published>
    <updated>2016-12-16T03:46:27.229Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>今天网络计算编程的复习课老师提到了关于socket的几种类型SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET，特意查阅资料整理记录一下。</p>
</blockquote>
<p><strong>友情链接：</strong></p>
<ul>
<li><a href="http://blog.163.com/alice_leee/blog/static/167106323201062332816623/" target="_blank" rel="external">SOCKET类型定义及应用</a></li>
<li><a href="http://blog.csdn.net/sight_/article/details/8138802" target="_blank" rel="external">SOCKET详解</a></li>
</ul>
<a id="more"></a>
<h2 id="socket-函数定义及其参数"><a href="#socket-函数定义及其参数" class="headerlink" title="socket()函数定义及其参数"></a>socket()函数定义及其参数</h2><p><strong><code>include &lt;sys/socket.h&gt;</code></strong><br><strong><code>int socket( int af, int type, int protocol);</code></strong></p>
<p>af：<br>一个地址描述。AF_INET，指定so_pcb中的地址要采用ipv4地址类型;AF_INET6，指定so_pcb中的地址要采用ipv6的地址类型;AF_LOCAL/AF_UNIX，指定so_pcb中的地址要使用绝对路径名。</p>
<p>type：<br>指定socket类型。新套接口的类型描述类型，如TCP（SOCK_STREAM）和UDP（SOCK_DGRAM）。常用的socket类型有，SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET等等。</p>
<p>protocol：<br>顾名思义，就是指定协议。套接口所用的协议。如调用者不想指定，可用0。常用的协议有，IPPROTO_TCP、IPPROTO_UDP、IPPROTO_STCP、IPPROTO_TIPC等，它们分别对应TCP传输协议、UDP传输协议、STCP传输协议、TIPC传输协议。</p>
<h2 id="socket常见三种类型"><a href="#socket常见三种类型" class="headerlink" title="socket常见三种类型"></a>socket常见三种类型</h2><p>主要说一下type参数，从上面api我们看到了socket有很多种类型，但是其实主要常用的只有<strong>SOCK_STREAM、SOCK_DGRAM、SOCK_RAW</strong>。</p>
<p>流套接字（SOCK_STREAM）：流套接字用于提供面向连接、可靠的数据传输服务。<strong>该服务将保证数据能够实现无差错、无重复发送，并按顺序接收</strong>。流套接字之所以能够实现可靠的数据服务，原因在于其使用了传输控制协议，即TCP（The Transmission Control Protocol）协议。</p>
<p>数据报套接字（SOCK_DGRAM）：数据报套接字提供了一种无连接的服务。<strong>该服务并不能保证数据传输的可靠性，数据有可能在传输过程中丢失或出现数据重复，且无法保证顺序地接收到数据。</strong>数据报套接字使用UDP（User Datagram Protocol）协议进行数据的传输。由于数据包套接字不能保证数据传输的可靠性，对于有可能出现的数据丢失情况，需要在程序中做相应的处理。</p>
<p>原始套接字(SOCK_RAW)：原始套接字与标准套接字（标准套接字指的是前面介绍的流套接字和数据报套接字）的区别在于：<strong>原始套接字可以读写内核没有处理的IP数据包，而流套接字只能读取TCP协议的数据，数据报套接字只能读取UDP协议的数据</strong>。因此，如果要访问其他协议发送数据必须使用原始套接字。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天网络计算编程的复习课老师提到了关于socket的几种类型SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET，特意查阅资料整理记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;友情链接：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.163.com/alice_leee/blog/static/167106323201062332816623/&quot;&gt;SOCKET类型定义及应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/sight_/article/details/8138802&quot;&gt;SOCKET详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://leaosunday.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="计算机网络" scheme="http://leaosunday.cc/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="socket" scheme="http://leaosunday.cc/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>On the way</title>
    <link href="http://leaosunday.cc/2016/12/15/on-the-way/"/>
    <id>http://leaosunday.cc/2016/12/15/on-the-way/</id>
    <published>2016-12-15T02:51:37.000Z</published>
    <updated>2016-12-15T02:52:32.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="On-the-way"><a href="#On-the-way" class="headerlink" title="Ｏｎ　ｔｈｅ　ｗａｙ"></a>Ｏｎ　ｔｈｅ　ｗａｙ</h1><blockquote>
<p>蔡蔡不定期更新的，日常。</p>
</blockquote>
<a id="more"></a>
<p>​    胖胖搭了一个博客。</p>
<p>​    我以为这就像是注册一个微博账号一样简单，但是看到他一点一点在我看不懂的命令行上敲啊敲，一点一点改动排版才发现，我在描述的这个东西是一个节点。</p>
<p>​    时间轴上总有一个一个小节点，节点上生长出来的故事让我们从原来的圈子里探出一截来，努力伸向下一个节点。</p>
<p>​    可能这对我来讲更明显一些。从当初的想当然到现在一步一个脚印在往前艰难地走着的时候，这个博客的出现像是有了一个秘密花园。这是属于两个人的博客。他是这么写的。我们两个人有了一个开放的秘密花园，种花种草晒太阳。装得下野心，装得下饮食男女，也装得下胡思乱想。</p>
<p>​    感觉是另一番天地。</p>
<p>​    作为一只略显（勾重点！！）迟钝的猿猴，日常可能是最能表达自己的方式。在想怎么写第一篇博客的时候，顺手翻了翻之前记在本子上的日常，可能以后想写些什么的时候，还是会像个矫情的青春期少女吧。</p>
<p>——若是可以放开一切躺在雪地里就好了，所有的烦绪都会融进那个冰冷但是亲切的怀抱里，没有一丝声音。（２０１３．１）</p>
<p>——也许我应该从镇定自己开始，把一切爱惜和原则都拾起来。（２０１３．２）</p>
<p>——日记总是断断续续，因为自己从来记不清情感和思绪，任由他们一团乱麻，只在自己的脑袋里装一个随打随销的打印机。（２０１４．１）</p>
<p>——高考把我们压抑成流水线上的面具，我以为自己从容，却不知道幼稚的心灵有很多事情，拿不起也放不下（２０１４．４）</p>
<p>——昨天班上的男生看起来喝了挺多的，一群涉世未深的少年，脱离禁制的感觉。（２０１４．９）</p>
<p>——我想重新梳理一下我的过去和未来。（２０１５．１）</p>
<p>——过年最开心的事情，是收到了小哥哥给我的红包（２０１５．３）</p>
<p>——打电话的时候整个人坐在栏杆上，那种终于得到一个承诺的感觉像是海啸翻过去之后一片云朗风清。好啊，好啊，我们在一起吧。（２０１５．６）</p>
<p>——记得给崔君打一个电话（２０１５．６）</p>
<p>——小说里的触感真实再现，从没想过这么顺其自然。（２０１５．７）</p>
<p>——一个没有未来，一个没有现在（２０１６．５）</p>
<p>​    好像从那以后的开心和不开心都没有再有过记录，尤其是和胖胖的照片只能待在云盘里。所以很喜欢这个地方，可以记录小事，大事，北方小女人和南方大男人之间的“家庭非暴力战争”，还有各自的成长。很期待他的“技术”分类里面会越来越多的东西，还有“日常”里面越来越多的零碎。</p>
<p>​    好久没写过东西还是有点混乱。</p>
<p>​     总之从这里开始，有人爱，有事做，有所期待。</p>
<p>​    </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;On-the-way&quot;&gt;&lt;a href=&quot;#On-the-way&quot; class=&quot;headerlink&quot; title=&quot;Ｏｎ　ｔｈｅ　ｗａｙ&quot;&gt;&lt;/a&gt;Ｏｎ　ｔｈｅ　ｗａｙ&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;蔡蔡不定期更新的，日常。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="蔡蔡日常" scheme="http://leaosunday.cc/categories/%E8%94%A1%E8%94%A1%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="日常" scheme="http://leaosunday.cc/tags/%E6%97%A5%E5%B8%B8/"/>
    
      <category term="蔡蔡" scheme="http://leaosunday.cc/tags/%E8%94%A1%E8%94%A1/"/>
    
  </entry>
  
  <entry>
    <title>NexT官档中的Bugs</title>
    <link href="http://leaosunday.cc/2016/12/14/doc-bug/"/>
    <id>http://leaosunday.cc/2016/12/14/doc-bug/</id>
    <published>2016-12-14T10:31:37.000Z</published>
    <updated>2016-12-15T03:35:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>使用过Hexo中Next主题的小伙伴们一定已经深陷其中摆脱不了了，但是跟着官档走的时候大家才发现到处都是坑。。这篇文章就是想和大家分享一下我在配置的时候遇到的各种坑。</p>
</blockquote>
<p><strong>友情链接</strong></p>
<ul>
<li><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT官档</a></li>
</ul>
<a id="more"></a>
<p>使用过Hexo中Next主题的小伙伴们一定已经深陷其中摆脱不了了，但是跟着官档走的时候大家才发现到处都是坑。。这篇文章就是想和大家分享一下我在配置的时候遇到的各种坑。</p>
<p><img src="http://oi4llr6gh.bkt.clouddn.com/joke.jpg" alt="坑爹~"></p>
<h2 id="Swiftype"><a href="#Swiftype" class="headerlink" title="Swiftype"></a>Swiftype</h2><p><img src="http://oi4llr6gh.bkt.clouddn.com/swiftype.jpg" alt="swiftype"></p>
<p>这是官档教程的截图，还提供了一个外链教程供大家学习和配置，得到大家支持的Swiftype搜索有着良好的口碑和用户体验。</p>
<p><strong>但是！！！</strong></p>
<p>当我屁颠屁颠跑去<a href="http://swiftype.com" target="_blank" rel="external">Swiftype官网</a>注册的时候，发现注册需要公司的邮箱，这是什么鬼？后来各种搜索之后才知道原来注册不再免费了~</p>
<h2 id="Algolia"><a href="#Algolia" class="headerlink" title="Algolia"></a>Algolia</h2><p>机智的我立马换了Algolia作搜索服务。</p>
<p><img src="http://oi4llr6gh.bkt.clouddn.com/algolia.jpg" alt="algolia"></p>
<p>“友好”的官档再次给出了详细的配置教程~</p>
<p><strong>但是！！！</strong></p>
<p>按照教程配置完成之后发现<img src="http://oi4llr6gh.bkt.clouddn.com/search.jpg" alt="">按钮并没有什么卵用。。根本就不是一个button。</p>
<p>经过一番搜索之后解决了这个问题。</p>
<p>在<code>next\layout\\_partials</code>目录下的<code>header.swig</code>文件中修改：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;% if hasSearch %&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"menu-item menu-item-search"</span>&gt;</span></div><div class="line">   &#123;% if theme.swiftype_key %&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"st-search-show-outputs"</span>&gt;</span></div><div class="line">   &#123;% elseif config.search %&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"popup-trigger"</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="comment">&lt;!--增加的代码 start--&gt;</span></div><div class="line">   &#123;% elseif theme.algolia %&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"popup-trigger"</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 增加的代码 end--&gt;</span></div><div class="line"></div><div class="line">   &#123;% endif %&#125;</div><div class="line">    &#123;% if theme.menu_icons.enable %&#125;</div><div class="line">    	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"menu-item-icon fa fa-search fa-fw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">    &#123;% endif %&#125;</div><div class="line">    &#123;&#123; __('menu.search') &#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure>
<h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><p>对于RSS的设置官方文档再次友善地给出了善意的提醒~</p>
<p><img src="http://oi4llr6gh.bkt.clouddn.com/rss.jpg" alt="官档截图"></p>
<p>好吧说一说在这里遇到的坑，不知道为啥大家用<code>npm install hexo-generator-feed</code>都是生效的，而我的<code>public</code>文件夹中没有atom.xml啊！！然后发现有遇到同样遭遇的小伙伴后解决了问题，解决方法：<code>npm install hexo-generator-feed --save</code></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>目前只发现了上述两点小问题，以后发现了其他问题再来补充。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用过Hexo中Next主题的小伙伴们一定已经深陷其中摆脱不了了，但是跟着官档走的时候大家才发现到处都是坑。。这篇文章就是想和大家分享一下我在配置的时候遇到的各种坑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;友情链接&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://theme-next.iissnan.com/&quot;&gt;NexT官档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://leaosunday.cc/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="NexT" scheme="http://leaosunday.cc/tags/NexT/"/>
    
      <category term="Algolia" scheme="http://leaosunday.cc/tags/Algolia/"/>
    
      <category term="Hexo" scheme="http://leaosunday.cc/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Mou-帮助文档</title>
    <link href="http://leaosunday.cc/2016/12/14/mou-doc/"/>
    <id>http://leaosunday.cc/2016/12/14/mou-doc/</id>
    <published>2016-12-14T05:06:51.000Z</published>
    <updated>2016-12-14T11:04:53.574Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>刚刚学习完Markdown的基础语法，对于爱好写作的朋友们可以留意以下这这种简单的标记语言，让你再也没有排版上的烦恼。</p>
</blockquote>
<p><strong> 分享两个学习的网站: </strong></p>
<ul>
<li><p><a href="http://sspai.com/25137" target="_blank" rel="external">认识与入门 Markdown</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="external">简书Markdown指南</a></p>
</li>
</ul>
<a id="more"></a>
<p>刚刚学习完Markdown的基础语法，对于爱好写作的朋友们可以留意以下这这种简单的标记语言，让你再也没有排版上的烦恼。</p>
<p><strong>下面是Mac OS X平台一款完美的Markdown编辑器的文档，可惜本人用的是Windows，只能盗一下截图来自己保存了(┬＿┬)。</strong><br><img src="http://oi4llr6gh.bkt.clouddn.com/1.png" alt="page1"></p>
<p><img src="http://oi4llr6gh.bkt.clouddn.com/mou2.png" alt="page2"></p>
<p><img src="http://oi4llr6gh.bkt.clouddn.com/mou3.png" alt="page3"></p>
<p><img src="http://oi4llr6gh.bkt.clouddn.com/mou4.png" alt="page4"></p>
<p><img src="http://oi4llr6gh.bkt.clouddn.com/mou5.png" alt="page5"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;刚刚学习完Markdown的基础语法，对于爱好写作的朋友们可以留意以下这这种简单的标记语言，让你再也没有排版上的烦恼。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt; 分享两个学习的网站: &lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sspai.com/25137&quot;&gt;认识与入门 Markdown&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/q81RER&quot;&gt;简书Markdown指南&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://leaosunday.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="MarkDown" scheme="http://leaosunday.cc/tags/MarkDown/"/>
    
      <category term="Mou" scheme="http://leaosunday.cc/tags/Mou/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇Blog</title>
    <link href="http://leaosunday.cc/2016/12/13/first-blog/"/>
    <id>http://leaosunday.cc/2016/12/13/first-blog/</id>
    <published>2016-12-13T12:21:51.000Z</published>
    <updated>2016-12-14T11:05:32.450Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>博客名为LuckyBamboo的蔡园，因为这是属于两个人的博客。</p>
</blockquote>
<p>Lucky Bamboo为一只大三的程序猿，主要记录和分享一下技术上的笔记。</p>
<p>蔡蔡作为幕后大老板，博客的幕后掌权人，可能偶尔会发下生活所见所感，提供精神上的支持~~</p>
<a id="more"></a>
<h2 id="博客介绍"><a href="#博客介绍" class="headerlink" title="博客介绍"></a>博客介绍</h2><p>博客名为LuckyBamboo的蔡园，因为这是属于两个人的博客。</p>
<h2 id="联系我们"><a href="#联系我们" class="headerlink" title="联系我们"></a>联系我们</h2><ul>
<li><p>Lucky Bamboo:</p>
<p>QQ:526320297</p>
</li>
<li><p>蔡蔡：</p>
<p>QQ:953847229</p>
</li>
</ul>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=32507038&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;博客名为LuckyBamboo的蔡园，因为这是属于两个人的博客。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lucky Bamboo为一只大三的程序猿，主要记录和分享一下技术上的笔记。&lt;/p&gt;
&lt;p&gt;蔡蔡作为幕后大老板，博客的幕后掌权人，可能偶尔会发下生活所见所感，提供精神上的支持~~&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://leaosunday.cc/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="启程" scheme="http://leaosunday.cc/tags/%E5%90%AF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
